{"version":3,"file":"static/js/30.d95c4fc2.chunk.js","mappings":"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","sources":["hooks/useTypingEffect.js","components/TerminalLine/TerminalLine.js","components/Terminal/Terminal.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction useTypingEffect(text, delay) {\n  const [typedText, setTypedText] = useState(\"\");\n\n  useEffect(() => {\n    let currentIndex = 0;\n\n    const intervalId = setInterval(() => {\n      const currentLetter = text[currentIndex];\n      setTypedText((prevTypedText) => prevTypedText + currentLetter);\n      currentIndex++;\n      if (currentIndex === text.length) {\n        clearInterval(intervalId);\n      }\n    }, delay);\n\n    return () => {\n      clearInterval(intervalId);\n      setTypedText(\"\");\n    };\n  }, [text, delay]);\n\n  return typedText;\n}\n\nexport default useTypingEffect;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport useTypingEffect from \"../../hooks/useTypingEffect\";\nimport { CursorPointer } from \"../../style/global.style\";\n\nconst TerminalLine = React.memo(function TerminalLine({ text }) {\n  const show = useTypingEffect(text, 100);\n\n  return (\n    <TerminalBase>\n      <img src={\"./images/terminalArrow.svg\"} alt=\"arrow\" />\n      {show}\n      <CursorPointer />\n    </TerminalBase>\n  );\n});\n\nexport default TerminalLine;\n\nexport const TerminalBase = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: 30px;\n  img {\n    height: 20px;\n    width: 18px;\n    margin-right: 10px;\n  }\n`;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport TerminalLine from \"../TerminalLine/TerminalLine\";\nimport { CursorPointer } from \"../../style/global.style\";\n\nconst colors = [\"#FF6E6E\", \"#FFE146\", \"#63CC63\"];\n\nconst Terminal = React.memo(function Terminal() {\n  const [root, setRoot] = useState(\"\");\n  const [subDirName, setSubDirName] = useState(\"\");\n  const [typingCount, setTypingCount] = useState(0);\n  const [isEndRoot, setIsEndRoot] = useState(false);\n  const [selectDir, setSelectDir] = useState({ isShow: false, idx: 0 });\n  const [completeTyping, setCompleteTyping] = useState([]);\n  const [showTyping, setShowTyping] = useState([]);\n  const firstText = \"안녕하세요 최기철입니다/\";\n  const subDirs = [\"Hwo Am I\", \"Personality\"];\n\n  const showText = [\n    `안녕하세요 최기철입니다`,\n    \"저는 이런 사람입니다\",\n    \"그리고 이런거를 잘합니다\",\n  ];\n\n  // 기본 typing Effect \"-> ~ cd \"\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setRoot(root + firstText[typingCount]);\n      setTypingCount(typingCount + 1);\n    }, 100);\n    if (typingCount === firstText.length) {\n      clearInterval(interval);\n      setTimeout(() => setIsEndRoot(true), 1000);\n      setTypingCount(0);\n    }\n    return () => {\n      clearInterval(interval);\n    };\n  }, [root]);\n\n  const handleSelectSubDir = (subDirName, idx) => {\n    setCompleteTyping([]);\n    setSubDirName(subDirName);\n    setSelectDir({ isShow: true, idx });\n  };\n\n  useEffect(() => {\n    // setTimeout(() => {\n    if (selectDir.isShow) {\n      let delay = 0;\n      showText.forEach((text, idx) => {\n        if (!idx) {\n          setShowTyping(<TerminalLine text={text} />);\n        }\n        if (idx > 0) {\n          setTimeout(() => {\n            setCompleteTyping(showText.slice(0, idx));\n            setShowTyping(<TerminalLine text={text} />);\n          }, delay);\n        }\n        delay += showText[idx].length * 100 + 100;\n      });\n    }\n    // }, 300);\n  }, [selectDir]);\n\n  return (\n    <Container>\n      {/* 터미널 Top 상태창 */}\n      <Top>\n        <ButtonContainer>\n          {colors.map((color, idx) => (\n            <Button key={idx} color={color} />\n          ))}\n        </ButtonContainer>\n        <SrcText>CholGiCheol@About/</SrcText>\n        <div>⌥⌘1</div>\n      </Top>\n      {/* 터미널 body */}\n      <TerminalContent>\n        {/* 기본 root typing \"-> ~ cd \" typing */}\n        <TerminalBase>\n          <img src={\"./images/terminalArrow.svg\"} alt=\"arrow\" />\n          <DirName>{\"~\"}</DirName>\n          {root + subDirName}\n          {!selectDir.isShow && <CursorPointer />}\n        </TerminalBase>\n        {/* subDir List */}\n        <TerminalBase>\n          {isEndRoot &&\n            subDirs.map((subDir, idx) => (\n              <SubDirName\n                key={idx}\n                num={idx}\n                selectDir={selectDir}\n                onClick={() => handleSelectSubDir(subDir, idx)}\n              >\n                {subDir}\n              </SubDirName>\n            ))}\n        </TerminalBase>\n        {/* typing 완료 된 이전 글 */}\n        {completeTyping.map((text) => (\n          <TerminalBase>\n            <img src={\"./images/terminalArrow.svg\"} alt=\"arrow\" />\n            {text}\n          </TerminalBase>\n        ))}\n        {/* 소개글 typing */}\n        {showTyping}\n      </TerminalContent>\n    </Container>\n  );\n});\n\nexport default Terminal;\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 1000px;\n  max-height: 700px;\n  width: 100%;\n  height: 100%;\n  border: 0.5px solid #eeeeee;\n  border-radius: 2%;\n  overflow: hidden;\n  background: rgb(29, 30, 39);\n`;\n\nexport const Top = styled.div`\n  padding: 10px;\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid #000000;\n  border-shadow: 1px 0 1px #000000;\n  background: rgb(47, 39, 38);\n  box-sizing: border-box;\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  width: 70px;\n  justify-content: space-between;\n`;\n\nexport const Button = styled.div`\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  border: 1px solid black;\n  background: ${(props) => props.color};\n`;\n\nexport const SrcText = styled.div`\n  display: flex;\n  width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  justify-content: center;\n`;\n\nexport const KeyBackgroundImg = styled.div`\n  width: 14px;\n  height: 14px;\n  background-url: url(\"./images/commandKey.png\");\n`;\n\nexport const TerminalContent = styled.div`\n  height: 100%;\n  width: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n`;\n\nexport const TerminalBase = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  height: 30px;\n  white-space: pre;\n  img {\n    height: 20px;\n    width: 18px;\n    margin-right: 10px;\n  }\n`;\n\nexport const SubDirName = styled.div`\n  /* font-family: Oswald-bold; */\n  color: ${(props) =>\n    props.selectDir.isShow && props.num === props.selectDir.idx\n      ? \"#2e2e2e\"\n      : \"tomato\"};\n  font-size: 18px;\n  background: ${(props) =>\n    props.selectDir.isShow && props.num === props.selectDir.idx\n      ? \"#ffffff\"\n      : \"none\"};\n\n  cursor: pointer;\n  margin-right: 30px;\n`;\n\nexport const DirName = styled.span`\n  color: rgb(73, 224, 244);\n  font-size: 25px;\n  margin-right: 10px;\n`;\n"],"names":["text","delay","_useState","useState","_useState2","_slicedToArray","typedText","setTypedText","useEffect","currentIndex","intervalId","setInterval","currentLetter","prevTypedText","length","clearInterval","React","_ref","show","useTypingEffect","_jsxs","TerminalBase","children","_jsx","src","alt","CursorPointer","styled","_templateObject","_taggedTemplateLiteral","colors","root","setRoot","_useState3","_useState4","subDirName","setSubDirName","_useState5","_useState6","typingCount","setTypingCount","_useState7","_useState8","isEndRoot","setIsEndRoot","_useState9","isShow","idx","_useState10","selectDir","setSelectDir","_useState11","_useState12","completeTyping","setCompleteTyping","_useState13","_useState14","showTyping","setShowTyping","firstText","showText","interval","setTimeout","forEach","TerminalLine","slice","Container","Top","ButtonContainer","map","color","Button","SrcText","TerminalContent","DirName","subDir","SubDirName","num","onClick","handleSelectSubDir","_templateObject2","_templateObject3","_templateObject4","props","_templateObject5","KeyBackgroundImg","_templateObject6","_templateObject7","_templateObject8","_templateObject9","_templateObject10"],"sourceRoot":""}