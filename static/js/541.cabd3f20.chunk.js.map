{"version":3,"file":"static/js/541.cabd3f20.chunk.js","mappings":"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","sources":["hooks/useTypingEffect.js","components/Terminal/Terminal.style.js","components/TerminalLine/TerminalLine.js","components/Terminal/Terminal.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction useTypingEffect(text, delay) {\n  const [typedText, setTypedText] = useState(\"\");\n\n  useEffect(() => {\n    let currentIndex = 0;\n    const intervalId = setInterval(() => {\n      const currentLetter = text[currentIndex];\n      setTypedText((prevTypedText) => prevTypedText + currentLetter);\n      currentIndex++;\n      if (currentIndex === text.length) {\n        clearInterval(intervalId);\n      }\n    }, delay);\n\n    return () => {\n      clearInterval(intervalId);\n      setTypedText(\"\");\n    };\n  }, [text, delay]);\n\n  return typedText;\n}\n\nexport default useTypingEffect;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  max-width: 1000px;\n  max-height: 700px;\n  width: 100%;\n  height: 100%;\n  border: 0.5px solid #eeeeee;\n  border-radius: 2%;\n  overflow: hidden;\n  background: rgb(29, 30, 39);\n  box-sizing: border-box;\n`;\n\nexport const Top = styled.div`\n  padding: 0.625rem;\n  display: flex;\n  width: 100%;\n  height: 2.813rem;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid #000000;\n  border-shadow: 1px 0 1px #000000;\n  background: rgb(47, 39, 38);\n  box-sizing: border-box;\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  width: 70px;\n  justify-content: space-between;\n`;\n\nexport const Button = styled.div`\n  width: 14px;\n  height: 14px;\n  border-radius: 50%;\n  border: 1px solid black;\n  background: ${(props) => props.color};\n`;\n\nexport const SrcText = styled.div`\n  display: flex;\n  width: 100%;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  justify-content: center;\n`;\n\nexport const TerminalContent = styled.div`\n  max-height: 655px;\n  height: 100%;\n  width: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n  overflow-y: scroll;\n  overflow-x: scroll;\n`;\n\nexport const TerminalBase = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  min-height: 30px;\n  box-sizing: border-box;\n  img {\n    height: 20px;\n    width: 18px;\n    margin-right: 10px;\n  }\n`;\n\nexport const NextDir = styled.div`\n  color: ${(props) =>\n    props.directoryName === props.subDirName ? \"#2e2e2e\" : \"tomato\"};\n  font-size: 18px;\n  background: ${(props) =>\n    props.directoryName === props.subDirName ? \"#ffffff\" : \"none\"};\n  cursor: pointer;\n  margin-right: 30px;\n`;\n\nexport const DirName = styled.span`\n  color: rgb(73, 224, 244);\n  font-size: 25px;\n  margin-right: 10px;\n`;\n","import React from \"react\";\nimport useTypingEffect from \"../../hooks/useTypingEffect\";\nimport { CursorPointer } from \"../../style/global.style\";\nimport { TerminalBase } from \"../Terminal/Terminal.style\";\n\nconst TerminalLine = React.memo(function TerminalLine({ text }) {\n  let typingText = useTypingEffect(text, 50);\n\n  return (\n    <TerminalBase>\n      <img src={\"./images/terminalArrow.svg\"} alt=\"arrow\" />\n      {typingText}\n      <CursorPointer />\n    </TerminalBase>\n  );\n});\n\nexport default TerminalLine;\n","import React, { useState, useEffect, useCallback, useRef } from \"react\";\nimport TerminalLine from \"../TerminalLine/TerminalLine\";\nimport { CursorPointer } from \"../../style/global.style\";\nimport { directoryData } from \"../../data/data\";\nimport {\n  Container,\n  Top,\n  ButtonContainer,\n  Button,\n  SrcText,\n  TerminalContent,\n  TerminalBase,\n  NextDir,\n  DirName,\n} from \"./Terminal.style\";\n\nconst colors = [\"#FF6E6E\", \"#FFE146\", \"#63CC63\"];\n\nconst Terminal = React.memo(function Terminal() {\n  const [root, setRoot] = useState(\"\");\n  const [subDirName, setSubDirName] = useState(\"\");\n  const [typingCount, setTypingCount] = useState(0);\n  const [isEndRoot, setIsEndRoot] = useState(false);\n  const [completeTyping, setCompleteTyping] = useState([]);\n\n  const [directory, setDirectory] = useState();\n  const [text, setText] = useState([]);\n  const [typingText, setTypingText] = useState(\"\");\n\n  useEffect(() => {\n    setDirectory(directoryData.root.child);\n  }, []);\n\n  const firstText = \"open  \";\n\n  // 기본 typing Effect \"-> ~ cd \"\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setRoot(root + firstText[typingCount]);\n      setTypingCount(typingCount + 1);\n    }, 100);\n\n    if (typingCount === firstText.length) {\n      clearInterval(interval);\n      setTimeout(() => setIsEndRoot(true), 1000);\n      setTypingCount(0);\n    }\n    return () => {\n      clearInterval(interval);\n    };\n  }, [root]);\n\n  // ---------------------------------------------------------------------------------------------------------------------\n\n  const handleSelectSubDir = useCallback((nextDirectory) => {\n    setCompleteTyping([]);\n    setTypingText(\"\");\n    if (nextDirectory.data === null) setDirectory({ ...nextDirectory.child });\n    else setText([...nextDirectory.data]);\n  }, []);\n\n  const typingRef = useRef(null);\n\n  useEffect(() => {\n    let timeoutId;\n    const arrTimeoutId = [];\n\n    const startTyping = () => {\n      let delay = 1000;\n      for (let i = 0; i < text.length; i++) {\n        const textLine = text[i];\n        timeoutId = setTimeout(() => {\n          if (i > 0) {\n            setCompleteTyping(text.slice(0, i));\n          }\n          setTypingText(textLine);\n        }, delay);\n        arrTimeoutId.push(timeoutId);\n\n        delay += text[i].length * 50 + 500;\n      }\n    };\n\n    startTyping();\n\n    return () => {\n      arrTimeoutId.forEach((id) => clearTimeout(id));\n    };\n  }, [text]);\n\n  useEffect(() => {\n    typingRef.current.scrollTop = typingRef.current.scrollHeight;\n  }, [typingText, completeTyping]);\n\n  return (\n    <Container>\n      {/* 터미널 Top 상태창 */}\n      <Top>\n        <ButtonContainer>\n          {colors.map((color, idx) => (\n            <Button key={idx} color={color} />\n          ))}\n        </ButtonContainer>\n        <SrcText>CholGiCheol@About/</SrcText>\n        <div>⌥⌘1</div>\n      </Top>\n      {/* 터미널 body */}\n      <TerminalContent ref={typingRef}>\n        {/* 기본 root typing \"-> ~ cd \" typing */}\n        <TerminalBase>\n          <img src={\"./images/terminalArrow.svg\"} alt=\"arrow\" />\n          <DirName>{\"~\"}</DirName>\n          {root + subDirName}\n          {!subDirName && <CursorPointer />}\n        </TerminalBase>\n        {/* subDir List */}\n        <TerminalBase>\n          {isEndRoot &&\n            Object.keys(directory).map((directoryName, idx) => (\n              <NextDir\n                key={idx}\n                num={idx}\n                directoryName={directoryName}\n                subDirName={subDirName}\n                onClick={() => {\n                  handleSelectSubDir(directory[directoryName]);\n                  setSubDirName(directoryName);\n                }}\n              >\n                {directoryName}\n              </NextDir>\n            ))}\n        </TerminalBase>\n        {/* typing 완료 된 이전 글 */}\n        {completeTyping.map((text, idx) => (\n          <TerminalBase key={idx}>\n            <img src={\"./images/terminalArrow.svg\"} alt=\"arrow\" />\n            {text}\n          </TerminalBase>\n        ))}\n        {/* 소개글 typing */}\n        {!!typingText && <TerminalLine text={typingText} />}\n      </TerminalContent>\n    </Container>\n  );\n});\n\nexport default Terminal;\n"],"names":["text","delay","_useState","useState","_useState2","_slicedToArray","typedText","setTypedText","useEffect","currentIndex","intervalId","setInterval","currentLetter","prevTypedText","length","clearInterval","Container","styled","_templateObject","_taggedTemplateLiteral","Top","_templateObject2","ButtonContainer","_templateObject3","Button","_templateObject4","props","color","SrcText","_templateObject5","TerminalContent","_templateObject6","TerminalBase","_templateObject7","NextDir","_templateObject8","directoryName","subDirName","DirName","_templateObject9","React","_ref","typingText","useTypingEffect","_jsxs","children","_jsx","src","alt","CursorPointer","colors","root","setRoot","_useState3","_useState4","setSubDirName","_useState5","_useState6","typingCount","setTypingCount","_useState7","_useState8","isEndRoot","setIsEndRoot","_useState9","_useState10","completeTyping","setCompleteTyping","_useState11","_useState12","directory","setDirectory","_useState13","_useState14","setText","_useState15","_useState16","setTypingText","directoryData","firstText","interval","setTimeout","handleSelectSubDir","useCallback","nextDirectory","data","_objectSpread","child","_toConsumableArray","typingRef","useRef","timeoutId","arrTimeoutId","_loop","i","textLine","slice","push","startTyping","forEach","id","clearTimeout","current","scrollTop","scrollHeight","map","idx","ref","Object","keys","num","onClick","TerminalLine"],"sourceRoot":""}